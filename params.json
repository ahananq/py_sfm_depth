{
  "name": "py sfm  depth",
  "tagline": "A Python script for performing refraction correction on Structure from Motion datasets",
  "body": "# This page is under construction...(25 July 2016)\r\n\r\n## <a id=\"top\"></a>Welcome to the tutorial for py_sfm_depth\r\n\r\nIf you use this tutorial and the accompanying software, please cite the following paper:\r\n>Dietrich, James T., 2016. Bathymetric Structure from Motion. Earth Surface Processes and Landforms. DOI: xxx\r\n\r\nThe above article was focused on UAV-based imagery collection, but ground-based should be usable as long as the images do not include the horizon (i.e. the camera is pointing mainly down)\r\n\r\nBecause this is a long tutorial, I've added some table of contents links throughout for easy navigation between the sections.\r\n\r\n----------\r\n[Top](#top) | [SfM Collection and Processing](#step-1) | [Point Cloud Processing](#step-2) | [Data Prep](#step-3) | [Running the Script](#step-4)\r\n\r\n----------\r\n\r\n## Prerequisites\r\n\r\nIn order to use this this tutorial, you will need:\r\n\r\n1.  Optimal site conditions:\r\n    *   Clear water is first and foremost. High levels of suspended sediment (cloudy water) or tannic conditions (dark brown water) will inhibit the use of SfM to measure depths. The rule is if you can’t see the bottom of the stream, neither can the camera…and that’s going to cause problems.\r\n    *   Minimal surface waves. Both wind-driven waves and hydraulic waves (riffles and standing waves) will increase the “noise” in the SFM point cloud. This will lead to inaccuracies/errors in the final outputs.\r\n    *   Cloudy, hazy, or smoky weather conditions create a lot of surface reflections on the water with will inhibit accurate measurements.\r\n2.  A Structure from Motion (or other photogrammetry) software package that can:\r\n    *   Export a georeferenced (or scaled) point cloud dataset\r\n    *   Export the calculated camera positions (x,y,z) and orientations (pitch, roll, yaw)\r\n3.  A point cloud/3D data processing software:\r\n    *   In this tutorial, I will be using my favorite (which is free and offers cross-platform support) – CloudCompare ([cloudcompare.org](http://www.cloudcompare.org))\r\n4.  An installation of Python ([python.org](http://www.python.org)) that has a number of libraries installed\r\n    * I use a scientific python distribution, Anaconda ([https://www.continuum.io/downloads](https://www.continuum.io/downloads)), that has most of the needed libraries.\r\n        *   With the exception of WX, which you can install via CONDA  \r\n\t`conda install -c anaconda wxpython=3.0.0.0`\r\n5. As with any SfM collection technique, practice is your best friend. **Do not** expect perfect results from the first attempt to correct SfM bathymetry.\r\n\r\n----------\r\n[Top](#top) | [SfM Collection and Processing](#step-1) | [Point Cloud Processing](#step-2) | [Data Prep](#step-3) | [Running the Script](#step-4)\r\n\r\n----------\r\n\r\n## <a id=\"step-1\"></a>SfM Collection and Processing \r\n\r\n### Collect imagery for your site\r\n\r\nI’m not going to go into the details here, I’m assuming you have knowledge/experience with imagery collection for SfM.  \r\n\r\n####Some tips for bathymetric data collection:\r\n\r\n*   I’ll reiterate, clear water is one of the most important factors and calmer wind conditions are ideal ( i.e. less surface waves).\r\n*   Imagery should be collected at low-oblique angles (~20° off nadir) in convergent, overlapping patterns. Collecting at two heights/altitudes is also advantageous.\r\n*   Using a polarizing filter, adjusted to reduce glare, will help the camera see through the water column to the bottom.\r\n*   As much as possible, keep the sun behind the sensor.\r\n*   Collect images at a time of day that minimizes shadows from the banks/riparian vegetation. Noon sun is not required and it is better to optimize for the site.\r\n*   Accurate ground control points are critical for any SfM collection. RTK-GPS or a Total Station are the recommended survey methods.\r\n\r\n### Surveying\r\n\r\nAccurate ground control points are critical for any SfM collection. RTK-GPS or a Total Station are the recommended survey methods.\r\n\r\n*   Additional surveying requirements:\r\n    * In-water validation points: \r\n\t    * You should collect a number of validation points (100 is a fairly easy number to reach) at a variety of the depths present in the study area. These are for error checking/error statistics.\r\n    * Water’s edge points: \r\n\t    * You will need to collect a number of survey points on/at the water’s edge (for establishing the water surface elevations).\r\n        *   You can do an extensive survey of the water’s edge (one point every 3-5 meters, plus extras at elevation transitions) or take a samples (one point every 20-30 meters, plus extras at elevation transitions).\r\n\t        * Either way you will need a water’s edge points for every part of the stream that where you want to map the bathymetry.\r\n        *   With sample surveys, you will need to fill in by digitizing points on the water’s edge (more on that later).\r\n        *   For streams with steep banks, this will be a challenge. However, surveying is the best option because digitizing the water level on step banks is notoriously difficult.\r\n\r\n### Processing\r\n\r\nGo through your software’s processing chain to the point where you have a georeferenced, dense point cloud (any additional processing, orthophotos or DEMs, is optional).\r\n\r\n1. Export your point cloud (LAS files are good, but it’s up to you)\r\n2. Export the calculated/estimated camera positions and orientations\r\n    *   The key here is that you need:\r\n\t    *   The x,y,z coordinates of the cameras in the same reference system as our points\r\n\t    *   The orientation angles of the cameras (pitch, roll, and yaw)\r\n\t    *   Pitch should be 0° = Nadir (straight down), you may need to convert pitch angles if your software uses a different 0° reference.\r\n\t    *   Roll in most software should be 0° = horizontal.\r\n\t    *   Yaw should be a compass angle, 0° = North\r\n\r\n----------\r\n[Top](#top) | [SfM Collection and Processing](#step-1) | [Point Cloud Processing](#step-2) | [Data Prep](#step-3) | [Running the Script](#step-4)\r\n\r\n----------\r\n\r\n## <a id=\"step-2\"></a>Point Cloud Processing\r\n\r\nThe instructions in this section use the tools in CloudCompare (CC), so assume that the tool names are for CloudCompare. If you are using a different software, you’ll need to read through and translate the instructions/tools to your specific software. Info on how to use the specific tools in CC can be found on the CloudCompare Wiki ([http://www.cloudcompare.org/doc/wiki/index.php?title=Main_Page](http://www.cloudcompare.org/doc/wiki/index.php?title=Main_Page))\r\n\r\n### Water Surface Processing\r\n\r\n#### Open your point cloud in CloudCompare\r\n\r\nIf you are prompted to apply coordinate offsets, you should accept the default X and Y, HOWEVER…set the Z offset to zero (it makes the calculations easier)\r\n\r\n#### Import your surveys water’s edge points (with the same offset as the point cloud)\r\n\r\n* If you did an extensive survey of the water’s edge you can skip down to the [\"Create a Delaunay Mesh...\"](#mesh) step\r\n\r\nSelect you point cloud in the DB Tree\r\n\r\n* Zoom into an area with surveyed water’s edge point as a reference to where the water’s edge appears in the point cloud. The obvious attribute to observe is the color change from dry to wet.\r\n* Select the “Point List Picking” tool, which lets you digitize multiple points\r\n\t* With this tool you can digitize (pick) additional points along the water’s edge. If you make a mistake, you can use the back button on the picking list window.\r\n\t* For many of my sites, I go crazy picking points every 2-3 meters. You will need a water’s edge points for every part of the stream that you want to have corrected data points.\r\n    * For study areas with “infinite” water surfaces (large lakes/ocean), I would suggest creating “synthetic” water’s edge points. These are just additional points with arbitrary X and Y coordinates and Z coordinates that set to the water surface elevation. These points should extend slightly beyond the study area. You can make the points in a text editor or Excel and import them.\r\n* Once you are satisfied with the point selections, click the green check mark in the toolbox to save the points as a sub-entity of your point cloud. Select the point cloud and re-open the Point List Picking tool…(The points should reappear in the pinking list)\r\n\t* Click the drop-down arrow by the “Save” icon and select “new cloud”, which will save the points as a separate point cloud in the tree with the name ‘Picking list’\r\n\r\nSelect and merge the new ‘Picking list’ cloud with the surveyed points using the “Merge Multiple Clouds” tool.\r\n\r\n* Select the new merged point cloud and add the Z values as a new scalar field (SF) attribute \r\n\t* Tools…Projection…Export coordinates(s) to SF(s)…check ‘Z’…OK\r\n\r\n### <a id=\"mesh\"></a>Create a Delaunay Mesh using the merged edge points\r\n\r\nSelect the merged water surface points in the DB Tree.\r\n\r\nSelect Edit…Mesh…Delaunay 2.5D (XY plane)\r\n\r\n* Max edge length = your point spacing (2-5m, this limits wild interpolation)\r\n\r\nThe mesh should appear with colors representing elevation.\r\n\r\n*   Check the mesh to make sure that there are not anomalous, abrupt changes in elevation along the edges (e.g. color changes).\r\n*   If there are errors, you can edit the points (delete/re-pick) and recreate the mesh.\r\n\r\n### Subsampling the point cloud\r\n\r\nIn order to limit the influence of noise in the point cloud, we need to subsample the point cloud to a uniform point spacing using a minimum elevation filter. The point spacing will need to be determined by you and the requirements/limitations of the site and your specific research question(s).\r\n\r\n#### Delete extra scalar fields\r\n\r\n*   Select your SfM point cloud in the DB Tree\r\n*   In the ‘Properties’ window, scroll down to the ‘Scalar Field’ section\r\n    *   If you have extra scalar fields in the point cloud (e.g. Point Source ID or Scan Direction) that are not needed…\r\n        *   Use the drop-down to select them and press the ‘Delete Current Scalar Field’ button on the toolbar. Repeat for all the fields you do not need.\r\n\r\n#### With the SfM point cloud selected, launch the ‘Rasterize tool’:\r\n\r\n1.  Tools…Projection…Rasterize…\r\n2.  In the Grid step box, enter the distance between points you want\r\n3.  Active layer = Height grid values\r\n4.  Projection, direction = Z\r\n5.  Cell height = minimum height\r\n6.  No checks in ‘interpolate SF’ or ‘resample input cloud’\r\n7.  Empty Cells, Fill with = leave empty\r\n8.  Click the ‘Update Grid’ button at the top\r\n\r\n* At the bottom, select the ‘Export tab’\r\n\t* In the Export per-cell statistics section, I would recommend you check all the boxes. This will export the statistics for each point and may be useful in doing a final error analysis (e.g correction error vs. roughness (std. dev.))\r\n*  Click the ‘Cloud button’ to export the resampled points as a new point cloud\r\n\r\nThe new cloud will appear in the DB Tree with the suffix *- Cloud.raster(#), where # is the spacing you specified.\r\n\r\n### Transferring attributes to the subsampled point cloud\r\n\r\nSelect your new subsampled point cloud in the DB Tree...\r\n\r\n#### Calculate the point-to-mesh distances\r\n\r\nSelect both the subsampled point cloud and the water surface mesh\r\n\r\n*   On the toolbar click ‘Calculate point/mesh distance’ OR Tools…Distances…Point/Mesh Dist\r\n\t*   Leave the options on the default\r\n*   This will add a new scalar field to the point cloud called ‘C2M Signed Distance’ which represents the “depth” of the points below the water surface\r\n\r\n#### Filtering the “underwater” points\r\nSelect the subsampled point cloud  \r\n\r\nClick the ‘Filter points by value’ tool on the toolbar\r\n\r\n*   Change the Min value to the max depth for your area (round up to a whole number)\r\n*   Change the Max value to zero\r\n*   Click OK\r\n\r\nThe underwater points will be extracted to a new cloud with a suffix *- Cloud.extract\r\n\r\n*   The edges outside the water surface mesh will likely be included in the extract\r\n    *   Use the editing tools to delete these edges, cropped to just inside the water surface mesh.\r\n\r\n#### Convert depth to water surface elevation\r\nWith the extracted point cloud selected, click the Calculator icon on the toolbar (“Add, subtract, multiply, or divide two scalar fields”)\r\n\r\n*   Set SF 1 = Coord. Z\r\n*   Set operation = minus\r\n*   Set Sf 2 = Height grid values\r\n*   Uncheck ‘Update SF1 directly’\r\n*   …OK\r\n\r\nThis subtracts the negative depth value from (adding it to) the SfM elevation value to give the water surface elevation for each point.\r\n\r\n#### Rename scalar fields\r\nIn the properties window…change the active SF to ‘C2M Signed Distances’ and delete this field\r\n\r\n*   Switch to Height grid value, and rename it to `sfm_z`\r\n    *   Edit…Scalar fields…Rename…[name]…OK\r\n* Switch to (SF# - SF#), and rename it to `w_surf`\r\n\r\n#### Export the point cloud\r\nSelect the edited point cloud\r\n\r\n*   File…Save...\r\n    *   Choose your file path\r\n    *   File name = [your_file_name].csv\r\n    *   Save as type = ‘ASCII cloud’\r\n\r\n#### Optional/Recommended…Save all of the processing data\r\nClick in the DB Tree and select all (Ctrl+A)\r\n\r\n*   File…Save...\r\n    *   Choose your file path\r\n    *   File name = [name]\r\n    *   Save as type = ‘CloudCompare entities (*.bin)’\r\n\r\n----------\r\n[Top](#top) | [SfM Collection and Processing](#step-1) | [Point Cloud Processing](#step-2) | [Data Prep](#step-3) | [Running the Script](#step-4)\r\n\r\n----------\r\n\r\n## <a id=\"step-3\"></a>Data Prep\r\n\r\nThe inputs for the Python script are the edited point cloud, the camera location/orientations, and a file with camera sensor parameters. These all need to be comma-delimited (*.csv) files. You will need open all of the files in a text editor or Excel to double-check the header names (they are case-sensitive). There are examples included in the \"Sample Data\" folder in the Git repository.\r\n\r\n#### Point cloud\r\n\r\n*   The required columns/headers are `x,y,sfm_z,w_surf`\r\n*   Any extra columns like color [r,g,b] will be copied to the output point cloud without any modification.\r\n*   If you followed the instructions above, you will have an extra column named ‘z’ in the point cloud, you can delete it if you like. It is the same as the ‘sfm_z’ column.\r\n\r\n#### Camera positions\r\n\r\n*   The required columns/headers are `x,y,z,pitch,roll,yaw`\r\n*   Camera/photo names can be included, but are not required\r\n\r\n#### Sensor properties\r\n\r\n*   The required columns/headers are `focal,sensor_x,sensor_y`\r\n*   Focal is the focal length of the camera in millimeters\r\n*   sensor_x & sensor_y are the physical sensor dimensions in millimeters\r\n    *   You may have to dig around the internet to find these values if they are not listed with the technical specifications of the camera.\r\n\r\n----------\r\n[Top](#top) | [SfM Collection and Processing](#step-1) | [Point Cloud Processing](#step-2) | [Data Prep](#step-3) | [Running the Script](#step-4)\r\n\r\n----------\r\n\r\n## <a id=\"step-4\"></a>Running the script\r\n\r\n> A quick note, there is very little error checking/handling in the\r\n> first version of this script. Most of the errors that are likely to occur will be\r\n> because of incorrect header names in the CSV files, double check them\r\n> against the sample data files. If the output is empty or looks weird,\r\n> double check that the camera orientation values are in the correct\r\n> directions and that the point cloud has correct water surface\r\n> elevations.\r\n\r\nDownload the Git repository\r\n\r\n*   Unzip and files into a convenient spot (near your exported data is always a good choice)\r\n\r\nLaunch the script\r\n\r\n*   If you are using Anaconda:\r\n    *   Open the Spyder editor\r\n    *   Load the python file from (py_sfm_depth_v1_0.py)\r\n    *   Run the script with the green “Play” button on the toolbar (no editing required)\r\n*   If you want to use the command line:\r\n    *   Open your command line/terminal program of choice\r\n    *   Change your directory to the place you unzipped the files\r\n    *   Execute the script with: `python py_sfm_depth_v1-0.py`\r\n\r\nLoad files\r\n\r\n*   The first window that pops up will ask for the point cloud (i.e. the one you exported from CloudCompare).\r\n    *   Navigate to the directory and select the file (the subsequent windows will return to this directory)\r\n*   Second is the camera position/orientation file.\r\n*   Third is the sensor file.\r\n*   Forth is the output file. I use something like `siteName_CORRECTED.csv`\r\n\t*   If the output file window pops back up, there is already a file with that name and you’ll need to choose another name.\r\n\r\nThe script will start…\r\n\r\n*   Processing the camera's instantaneous fields of view first.\r\n*   Then processing point in batches of 7,500.\r\n\r\nWhen the script is finished, it will report how many points were processed and approximately how long it took. You can exit the editor or terminal.\r\n\r\n### Examining the results\r\n\r\nOpen the output file in CloudCompare\r\n\r\n*   The ‘Open ASCII File’ import window will open\r\n*   The header names will be in the first line, note the column number of ‘corElev_avg’\r\n*   At the bottom, separator is comma(,) and skip line = 1 and check ‘extract scalar fields from first line’\r\n    *   CC will try to make the third column ‘coord Z’. With the drop downs, reassign ‘coord Z’ to the ‘corElev_avg’ column\r\n*   If you have extra columns…\r\n    *   You can set RGB columns, if they are not automatically interpreted\r\n    *   Make sure none of the columns are interpreted as `Nx,Ny,Nz`. These are the “normal” directions (the surface orientation of the point). Change these columns to “Scalar”. (That is, unless you do have normal stored as part of the point cloud, but you will most likely not have these fields).\r\n\r\nThe cloud should be shown in the viewer. You can change the scalar field to ‘h,avg’ to display depth, or change the colors to RGB (if you have them in your data).\r\n\r\n#### And that’s your data corrected for refraction. I would suggest doing some error analysis before going too far, but that’s a topic for another tutorial…\r\n\r\n----------\r\n[Top](#top) | [SfM Collection and Processing](#step-1) | [Point Cloud Processing](#step-2) | [Data Prep](#step-3) | [Running the Script](#step-4)\r\n\r\n----------\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}